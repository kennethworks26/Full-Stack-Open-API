{"version":3,"sources":["services/persons.js","components/Notification.js","components/Search.js","components/AddPerson.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","getAll","a","request","axios","get","response","data","console","log","create","newObject","post","update","id","put","remove","delete","Notification","notification","message","status","className","Search","handleSearchChange","onChange","AddPerson","handleNameChange","handleNumberChange","addPerson","type","onClick","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","searchName","setSearchName","notificationMessage","setNotificationMessage","useEffect","personService","then","validateNewPerson","name","find","person","alert","event","target","value","filter","toLowerCase","includes","preventDefault","personObject","number","existingPerson","window","confirm","returnedPerson","map","setTimeout","catch","error","concat","key","removePerson","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+QACMA,EAAU,eA0CD,GACbC,OAzCU,uCAAG,8BAAAC,EAAA,6DACPC,EAAUC,IAAMC,IAAIL,GADb,kBAGYG,EAHZ,cAGLG,EAHK,yBAIJA,EAASC,MAJL,gCAMXC,QAAQC,IAAR,MANW,yDAAH,qDA0CVC,OAhCU,uCAAG,WAAMC,GAAN,iBAAAT,EAAA,6DACPC,EAAUC,IAAMQ,KAAKZ,EAASW,GADvB,kBAGYR,EAHZ,cAGLG,EAHK,yBAIJA,EAASC,MAJL,gCAMXC,QAAQC,IAAR,MANW,yDAAH,sDAiCVI,OAvBU,uCAAG,WAAOC,EAAIH,GAAX,iBAAAT,EAAA,6DACPC,EAAUC,IAAMW,IAAN,UAAaf,EAAb,YAAwBc,GAAMH,GADjC,kBAGYR,EAHZ,cAGLG,EAHK,yBAIJA,EAASC,MAJL,gCAMXC,QAAQC,IAAR,MANW,yDAAH,wDAwBVO,OAdU,uCAAG,WAAMF,GAAN,iBAAAZ,EAAA,6DACPC,EAAUC,IAAMa,OAAN,UAAgBjB,EAAhB,YAA2Bc,IAD9B,kBAGYX,EAHZ,cAGLG,EAHK,yBAIJA,EAASC,MAJL,gCAMXC,QAAQC,IAAR,MANW,yDAAH,uDCrBGS,EAVM,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACdC,EAAoBD,EAApBC,QAASC,EAAWF,EAAXE,OAEjB,GAAgB,OAAZD,EAIJ,OAAO,yBAAKE,UAAWD,GAASD,ICGnBG,EAVA,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,mBAChB,OACE,6BACE,sCACA,kDACoB,2BAAOC,SAAUD,OCa5BE,EAlBG,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,iBAAkBC,EAAoC,EAApCA,mBAAoBC,EAAgB,EAAhBA,UACzD,OACE,8BACE,sCACQ,2BAAOJ,SAAUE,KAEzB,wCACU,2BAAOF,SAAUG,KAE3B,6BACE,4BAAQE,KAAK,SAASC,QAASF,GAA/B,UC6IOG,G,MAlJH,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACTC,EADS,KACAC,EADA,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGkBJ,mBAAS,IAH3B,mBAGTK,EAHS,KAGEC,EAHF,OAIoBN,mBAAS,IAJ7B,mBAITO,EAJS,KAIGC,EAJH,OAKsCR,mBAAS,CAC7Db,QAAS,GACTC,OAAQ,KAPM,mBAKTqB,EALS,KAKYC,EALZ,KAUhBC,qBAAU,WACRC,EAAc5C,SAAS6C,MAAK,SAAAZ,GAC1BC,EAAWD,QAEZ,IAEH,IAgGMa,EAAoB,SAAAC,GACDd,EAAQe,MAAK,SAAAC,GAAM,OAAIA,EAAOF,OAASA,MAG5DG,MAAM,GAAD,OAAIH,EAAJ,wCAKT,OACE,6BACE,yCACA,kBAAC,EAAD,CAAc7B,aAAcuB,IAC5B,kBAAC,EAAD,CAAQlB,mBArGe,SAAA4B,GACzBX,EAAcW,EAAMC,OAAOC,OAC3BnB,EACED,EAAQqB,QAAO,SAAAL,GAAM,OAAIA,EAAOF,KAAKQ,cAAcC,SAASjB,UAmG5D,kBAAC,EAAD,CACEb,iBA/GmB,SAAAyB,GACvBf,EAAWe,EAAMC,OAAOC,QA+GpB1B,mBA5GqB,SAAAwB,GACzBb,EAAaa,EAAMC,OAAOC,QA4GtBzB,UAlGY,SAAAuB,GAChBA,EAAMM,iBACNX,EAAkBX,GAElB,IAAMuB,EAAe,CACnBX,KAAMZ,EACNwB,OAAQtB,GAGJuB,EAAiB3B,EAAQe,MAAK,SAAAC,GAAM,OAAIA,EAAOF,OAASZ,KAC1DyB,EAEAC,OAAOC,QAAP,UACKF,EAAeb,KADpB,kFAIAH,EACGhC,OAAOgD,EAAe/C,GAAI6C,GAC1Bb,MAAK,SAAAkB,GACJ7B,EACED,EAAQ+B,KAAI,SAAAf,GAAM,OAChBA,EAAOpC,KAAO+C,EAAe/C,GAAKoC,EAASc,MAI/CrB,EAAuB,CACrBvB,QAAQ,WAAD,OAAa4C,EAAehB,MACnC3B,OAAQ,YAEV6C,YAAW,WACTvB,EAAuB,CACrBvB,QAAS,GACTC,OAAQ,OAET,KAEHgB,EAAW,IACXE,EAAa,OAEd4B,OAAM,SAAAC,GACLzB,EAAuB,CACrBvB,QAASgD,EACT/C,OAAQ,UAEV6C,YAAW,WACTvB,EAAuB,CACrBvB,QAAS,GACTC,OAAQ,OAET,QAITwB,EAAcnC,OAAOiD,GAAcb,MAAK,SAAAkB,GACtC7B,EAAWD,EAAQmC,OAAOL,IAE1BrB,EAAuB,CACrBvB,QAAQ,SAAD,OAAW4C,EAAehB,MACjC3B,OAAQ,YAEV6C,YAAW,WACTvB,EAAuB,CACrBvB,QAAS,GACTC,OAAQ,OAET,KAEHgB,EAAW,IACXE,EAAa,UAgCf,qCACCL,EAAQ+B,KAAI,SAAAf,GAAM,OACjB,yBAAK5B,UAAU,OAAOgD,IAAKpB,EAAOpC,IAChC,2BACGoC,EAAOF,KADV,MACmBE,EAAOU,QAE1B,4BAAQ9B,KAAK,SAASC,QAAS,kBAjClB,SAAC,GAAkB,IAAhBjB,EAAe,EAAfA,GAAIkC,EAAW,EAAXA,KACtBc,OAAOC,QAAP,iBAAyBf,EAAzB,OACFH,EAAc7B,OAAOF,GAAIgC,MAAK,SAAAkB,GAC5B7B,EAAWD,EAAQqB,QAAO,SAAAS,GAAc,OAAIA,EAAelD,KAAOA,SA8B3ByD,CAAarB,KAAlD,iBCpIUsB,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdlB,OAAM,SAAAC,GACL5D,QAAQ4D,MAAMA,EAAMhD,c","file":"static/js/main.696b7955.chunk.js","sourcesContent":["import axios from \"axios\";\nconst baseUrl = \"/api/persons\";\n\nconst getAll = async () => {\n  const request = axios.get(baseUrl);\n  try {\n    const response = await request;\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst create = async newObject => {\n  const request = axios.post(baseUrl, newObject);\n  try {\n    const response = await request;\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst update = async (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  try {\n    const response = await request;\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst remove = async id => {\n  const request = axios.delete(`${baseUrl}/${id}`);\n  try {\n    const response = await request;\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport default {\n  getAll,\n  create,\n  update,\n  remove\n};\n","import React from \"react\";\n\nconst Notification = ({ notification }) => {\n  const { message, status } = notification;\n\n  if (message === null) {\n    return;\n  }\n\n  return <div className={status}>{message}</div>;\n};\n\nexport default Notification;\n","import React from \"react\";\n\nconst Search = ({ handleSearchChange }) => {\n  return (\n    <div>\n      <h2>Search</h2>\n      <div>\n        filter shown with <input onChange={handleSearchChange} />\n      </div>\n    </div>\n  );\n};\nexport default Search;\n","import React from \"react\";\n\nconst AddPerson = ({ handleNameChange, handleNumberChange, addPerson }) => {\n  return (\n    <form>\n      <div>\n        name: <input onChange={handleNameChange} />\n      </div>\n      <div>\n        number: <input onChange={handleNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\" onClick={addPerson}>\n          add\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default AddPerson;\n","import React, { useState, useEffect } from \"react\";\nimport personService from \"./services/persons\";\nimport Notification from \"./components/Notification\";\nimport Search from \"./components/Search\";\nimport AddPerson from \"./components/AddPerson\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [searchName, setSearchName] = useState(\"\");\n  const [notificationMessage, setNotificationMessage] = useState({\n    message: \"\",\n    status: \"\"\n  });\n\n  useEffect(() => {\n    personService.getAll().then(persons => {\n      setPersons(persons);\n    });\n  }, []);\n\n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = event => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleSearchChange = event => {\n    setSearchName(event.target.value);\n    setPersons(\n      persons.filter(person => person.name.toLowerCase().includes(searchName))\n    );\n  };\n\n  const addPerson = event => {\n    event.preventDefault();\n    validateNewPerson(newName);\n\n    const personObject = {\n      name: newName,\n      number: newNumber\n    };\n\n    const existingPerson = persons.find(person => person.name === newName);\n    if (existingPerson) {\n      if (\n        window.confirm(\n          `${existingPerson.name} is already added to the phonebook, replace the old number with the new one?`\n        )\n      ) {\n        personService\n          .update(existingPerson.id, personObject)\n          .then(returnedPerson => {\n            setPersons(\n              persons.map(person =>\n                person.id !== existingPerson.id ? person : returnedPerson\n              )\n            );\n\n            setNotificationMessage({\n              message: `Updated ${returnedPerson.name}`,\n              status: \"success\"\n            });\n            setTimeout(() => {\n              setNotificationMessage({\n                message: \"\",\n                status: \"\"\n              });\n            }, 5000);\n\n            setNewName(\"\");\n            setNewNumber(\"\");\n          })\n          .catch(error => {\n            setNotificationMessage({\n              message: error,\n              status: \"error\"\n            });\n            setTimeout(() => {\n              setNotificationMessage({\n                message: \"\",\n                status: \"\"\n              });\n            }, 5000);\n          });\n      }\n    } else {\n      personService.create(personObject).then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson));\n\n        setNotificationMessage({\n          message: `Added ${returnedPerson.name}`,\n          status: \"success\"\n        });\n        setTimeout(() => {\n          setNotificationMessage({\n            message: \"\",\n            status: \"\"\n          });\n        }, 5000);\n\n        setNewName(\"\");\n        setNewNumber(\"\");\n      });\n    }\n  };\n\n  const removePerson = ({ id, name }) => {\n    if (window.confirm(`Delete ${name}?`)) {\n      personService.remove(id).then(returnedPerson => {\n        setPersons(persons.filter(returnedPerson => returnedPerson.id !== id));\n      });\n    }\n  };\n\n  const validateNewPerson = name => {\n    const nameValidation = persons.find(person => person.name === name);\n\n    if (nameValidation) {\n      alert(`${name} is already added to the phonebook`);\n      return;\n    }\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification notification={notificationMessage} />\n      <Search handleSearchChange={handleSearchChange} />\n      <AddPerson\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n        addPerson={addPerson}\n      />\n      <h2>Names</h2>\n      {persons.map(person => (\n        <div className=\"flex\" key={person.id}>\n          <p>\n            {person.name} - {person.number}\n          </p>\n          <button type=\"button\" onClick={() => removePerson(person)}>\n            delete\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}